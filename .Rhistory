IF <- nrow(mat1)/ apply(mat1, 2, effectiveSize)
ESS <- apply(mat1, 2, effectiveSize)
par(mfrow=c(1,2))
barplot(ESS)
hist(ESS)
par(mfrow=c(1,2))
barplot(IF)
hist(IF)
output2 <- jags.samples(mod,params,n.iter=iter)
View(ESS)
T=36
y=c(0, 0, 1092.23, 100.01,1234.32, 1460.85, 1570.38, 1819.79, 1391.27, 1507.60,
1541.44, 1631.21, 1628.60, 1609.33, 1801.68, 1809.08, 1754.74, 1779.48, 1699.13,
1681.39, 1610.46, 1918.45, 1717.07, 1415.69, 1229.02, 1082.02, 1096.61, 1045.84,
1137.03, 981.1, 647.67, 992.65, 968.62, 926.83, 952.96, 865.64)
f=c(0.1922, 0.3082, 0.3082, -0.9676, 0.5401, 0.3082, 1.1995, 0.1921, -0.8526,
-1.0835, -0.6196, -1.1995, -0.5037, -0.1557, 0.0762, 2.628, -0.3877, -0.968,
1.9318, -0.6196, -0.3877, 1.700, 2.2797, 0.6561, -0.8516, -1.0835, -1.0835,
0.1922, 0.1922, -0.1557, -0.5037, -0.8516, 0.8880, -0.0398, -1.1995, 0)
T1=35
T2=35
m=matrix(c(
13,4,1,2,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1124,
0,16,4,3,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1259,
0,0,11,1,1,1,0,2,1,1,1,1,2,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1082,
0,0,0,10,4,2,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1595,
0,0,0,0,11,1,5,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1596,
0,0,0,0,0,9,5,4,0,2,2,2,1,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2091,
0,0,0,0,0,0,11,9,4,3,1,1,1,3,2,2,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1964,
0,0,0,0,0,0,0,8,4,2,0,0,0,1,2,3,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1942,
0,0,0,0,0,0,0,0,4,1,1,2,2,1,3,3,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2444,
0,0,0,0,0,0,0,0,0,8,2,2,2,6,1,5,2,1,3,1,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,3055,
0,0,0,0,0,0,0,0,0,0,16,1,1,1,2,3,2,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,3412,
0,0,0,0,0,0,0,0,0,0,0,13,4,4,7,3,1,1,1,1,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,3907,
0,0,0,0,0,0,0,0,0,0,0,0,11,4,0,2,1,1,2,2,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,2538,
0,0,0,0,0,0,0,0,0,0,0,0,0,11,3,5,1,3,3,2,3,0,1,0,1,1,0,0,0,0,0,0,0,0,0,3270,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,5,0,5,4,2,1,2,3,0,0,0,1,0,0,0,0,0,0,0,0,3443,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,5,2,2,0,5,3,0,0,0,1,0,0,0,0,0,0,0,0,0,3132,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,4,6,1,3,3,2,0,1,0,0,1,0,1,0,0,0,0,0,3275,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,8,1,2,4,5,3,0,1,2,0,0,1,0,0,0,0,0,3447,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,2,2,3,3,3,1,0,0,0,0,0,0,0,0,0,0,3902,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,6,2,0,1,1,0,0,1,0,0,0,0,0,0,2860,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,7,6,4,0,0,2,0,0,0,1,2,0,0,1,4077,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,3,2,0,0,0,0,1,0,1,0,0,0,0,4017,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,2,5,2,0,2,2,2,0,0,0,0,0,4827,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,4,3,4,4,2,2,1,0,2,0,1,4732,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,2,1,2,2,3,0,0,3,0,0,5000,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,4,4,3,0,2,1,0,2,1,4769,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,4,2,4,2,2,3,1,1,3603,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,3,3,2,1,0,2,0,4147,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,4,6,1,0,1,0,4293,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,3,1,2,0,1,3455,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,5,2,2,1,3673,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,4,6,0,3900,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,5,1,3578,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,4481,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,4334),
nrow=35,ncol=36,byrow=T)
BKM_Data.R
source("BKM_Data.R")
source("BKM_StartingVals.R")
source("BKM_StartingVals.R")
mod <- jags.model('BKM_Bugs.R',data,inits,n.chains=cha,n.adapt=ada)
# Load required packages and fix the random seed
library(rjags)
library(coda)
library(lattice)
set.seed(134522)
# MCMC details: ####
ada=100
iter=10000
th=1
cha=2
break
break
break()
p=1-1/5000
r = 200*(1-p)/p
p
r
1+3+2+2+1
p1=1-1/5000
r1 = 200*(1-p1)/p1
pa=1-1/1000
ra = 1000*(1-pa)/pa
rm(p)
rm(r)
? dbinom
rnbinom(1, n1, 1-p1)
rnbinom(1, r1, 1-p1)
rnbinom(1, r1, 1-p1)
rnbinom(1, r1, 1-p1)
rnbinom(1, r1, 1-p1)
rnbinom(1, r1, 1-p1)
rnbinom(1, r1, 1-p1)
rnbinom(1, r1, 1-p1)
rnbinom(1, r1, 1-p1)
p1
r1
p1*r1/(1-p1)
p1*r1/(1-p1)^2
p1=0.5
r1=400
p1*r1/(1-p1)
p1*r1/(1-p1)^2
p1=0.05
p1*r1/(1-p1)
p1*r1/(1-p1)^2
# Load required packages and fix the random seed
library(rjags)
library(coda)
library(lattice)
set.seed(134522)
# MCMC details: ####
ada=100
iter=1000
th=1
cha=2
# Read data
source("BKM_Data.R")
# Set parameters and inital values
source("BKM_StartingVals.R")
# Run the MCMC:
# tstart=proc.time()
mod <- jags.model('BKM_Bugs.R',data,inits,n.chains=cha,n.adapt=ada)
# temp=proc.time()-tstart
mod
prior = rep(1/(M+1-n),M+1-n)
N=500
T=10
x<-matrix(NA,N,T)
w<-matrix(NA,N,T)
alive<-matrix(NA,N,T)
beta<-c(-3,0.2)   # GLIM parameters for survival probability
p<-0.3            # prob. (observed | alive)
lambda<-0.9       # prob. (recovery | dies)
sigma<-1.2        # sd of AR(1)-component in covariate process
phi=0.6           # persistence parameter of AR(1)-component in covariate process
alpha=2           # factor in sine-shaped deterministic trend in covariate process
mu=25
alp<-alpha*sin(2*pi*(1:T)/T)
k=1
boo<-sample(1:(T-1),size=1)
boo
boo<-sample(1:(T-1),size=1)
boo
? sample
alive[k,boo]<-1
View(alive)
View(alive)
## Web Appendix A
## This code involves two parts:
## Part I simulates MRR data from the model described in Section 3 of the main manuscript
## Part II fits the correctly specified model (HMM-C) to the simulated data using the HMM-based approach
library(boot)
set.seed(12345)
#################################
### Part I: simulate MRR data ###
#################################
N=500
T=10
x<-matrix(NA,N,T)
w<-matrix(NA,N,T)
alive<-matrix(NA,N,T)
beta<-c(-3,0.2)   # GLIM parameters for survival probability
p<-0.3            # prob. (observed | alive)
lambda<-0.9       # prob. (recovery | dies)
sigma<-1.2        # sd of AR(1)-component in covariate process
phi=0.6           # persistence parameter of AR(1)-component in covariate process
alpha=2           # factor in sine-shaped deterministic trend in covariate process
mu=25
## simulate survival, covariate and observation process
alp<-alpha*sin(2*pi*(1:T)/T)
for (k in 1:N){
boo<-sample(1:(T-1),size=1)
alive[k,boo]<-1
x[k,boo]<-1
w[k,boo]<-rnorm(1,15,2) # initial body mass distribution
for (i in (boo+1):T){
w[k,i]<-phi*(w[k,i-1]-mu)+mu+alp[i]+sigma*rnorm(1)
ifelse(alive[k,i-1]==1,alive[k,i]<-rbinom(1,size=1,prob=inv.logit(beta[1]+beta[2]*w[k,i-1])),alive[k,i]<-0)
if (alive[k,i]==1) {
x[k,i]<-rbinom(1,size=1,prob=p)
}
else {
ifelse(alive[k,i-1]==0,x[k,i]<-0,x[k,i]<-2*rbinom(1,size=1,prob=lambda))
}
}
}
## set missing covariate values equal to NA
for (i in 1:N){
for (j in 1:T){
if (!is.na(x[i,j]) & x[i,j]==0) w[i,j]<-NA
if (is.na(x[i,j]))              w[i,j]<-NA
}
}
## determine times when animals are known to be alive (even though they may not be seen at those times)
k.alive<-matrix(0,N,T)
for (i in 1:N){
lo<-min(which(x[i,]==1))
up<-max(which(x[i,]==1))
if (sum(which(x[i,]==2))>0) up<-max(up,max(which(x[i,]==2))-1)
k.alive[i,lo:up]<-1
}
########################################
### Part II: estimation of the model ###
########################################
## number of intervals used in the approximation
m=40
## define essential range of covariate process used in numerical integration to approximate the likelihood
max.w  <-  round(12/10*max(abs(w)[!is.na(w)])) # essential range upper limit
min.w  <-  round(8/10*min(abs(w)[!is.na(w)]))  # essential range lower limit
K      <-m+1
wb     <- seq(min.w,max.w,length=K)
wgrid  <-(wb[-1]+wb[-K])*0.5
## function that transforms natural (constrained) parameters to working (unconstrained) parameters
n2w<-function(beta,p,lambda,sigma,phi,alpha,mu){
parvect<-c(beta,logit(p),logit(lambda),log(sigma),logit(phi),alpha,mu)
return(parvect)
}
## function that performs the inverse transformation
w2n=function(parvect){
beta   <- parvect[1:2]
p      <- inv.logit(parvect[3])
lambda <- inv.logit(parvect[4])
sigma  <- exp(parvect[5])
phi    <- inv.logit(parvect[6])
alpha  <- parvect[7]
mu     <- parvect[8]
return(list(beta=beta,p=p,lambda=lambda,sigma=sigma,phi=phi,alpha=alpha,mu=mu))
}
## function that computes minus the approximate log likelihood
funmllk<-function(parvect,x){
lpn<-w2n(parvect)
mllk=rep(NA,N)
alp<-lpn$alpha*sin(2*pi*(1:T)/T)
for (i in 1:N){
start<-min(which(k.alive[i,]==1))
delta<-rep(0,m+2)
if (wb[1]<w[i,start]) {
delta[max(which(wb<w[i,start]))]<-1
}
else {
delta[1]<-1
}
foo <- delta
sumfoo<-sum(foo)
lscale<-log(sumfoo)
foo<-foo/sumfoo
for (j in (start+1):T){
if (x[i,j-1]==2) break
gamma   <- matrix(0,m+2,m+2)
gamma[(m+1):(m+2),m+2]<-c(1,1)
P  <- c(rep(lpn$p,m),lpn$lambda,0)
Pc <- c(rep(1-lpn$p,m),1-lpn$lambda,1)
if (x[i,j]==2) {
if (is.na(w[i,j-1]))  gamma[,m+1]<-c(1-inv.logit(lpn$beta[1]+lpn$beta[2]*wgrid),1,0)
if (!is.na(w[i,j-1])) gamma[,m+1]<-c(1-inv.logit(lpn$beta[1]+lpn$beta[2]*rep(w[i,j-1],m)),1,0)
gamma[,-(m+1)]<-matrix(0,m+2,m+1)
}
if (x[i,j]==1) {
gamma   <- matrix(0,m+2,m+2)
if (!is.na(w[i,j])) {
ifelse(wb[1]<w[i,j],ind<-max(which(wb[-K]<w[i,j])),ind<-1)
if (is.na(w[i,j-1]))  gamma[1:m,ind]<-dnorm(w[i,j],lpn$phi*(wgrid-lpn$mu)+lpn$mu+alp[j],lpn$sigma)*inv.logit(lpn$beta[1]+lpn$beta[2]*wgrid)
if (!is.na(w[i,j-1])) gamma[1:m,ind]<-dnorm(w[i,j],lpn$phi*(rep(w[i,j-1]-lpn$mu,m))+lpn$mu+alp[j],lpn$sigma)*inv.logit(lpn$beta[1]+lpn$beta[2]*rep(w[i,j-1],m))
}
}
if (x[i,j]==0) {
if ( is.na(w[i,j-1])) {
for (doo in 1:m){
goo<-pnorm(wb[-1],lpn$phi*(wgrid[doo]-lpn$mu)+lpn$mu+alp[j],lpn$sigma)-pnorm(wb[-K],lpn$phi*(wgrid[doo]-lpn$mu)+lpn$mu+alp[j],lpn$sigma)
surv<-inv.logit(lpn$beta[1]+lpn$beta[2]*wgrid[doo])
gamma[doo,1:m]<-goo/sum(goo)*surv
gamma[doo,m+1]<-1-surv
}
if (k.alive[i,j]==1) {P<-Pc; gamma[1:m,m+1]<-rep(0,m); gamma[1:m,m+2]<-rep(0,m)}
if (k.alive[i,j]==0) {P<-Pc}
}
if (!is.na(w[i,j-1])) {
ifelse(wb[1]<w[i,j-1],ind<-max(which(wb[-K]<w[i,j-1])),ind<-1)
surv<-inv.logit(lpn$beta[1]+lpn$beta[2]*w[i,j-1])
gamma[ind,1:m]<-(pnorm(wb[-1],lpn$phi*(w[i,j-1]-lpn$mu)+lpn$mu+alp[j],lpn$sigma)-pnorm(wb[-K],lpn$phi*(w[i,j-1]-lpn$mu)+lpn$mu+alp[j],lpn$sigma))*surv
gamma[ind,m+1]<-1-surv
if (k.alive[i,j]==1) {P<-Pc; gamma[ind,m+1]<-0; gamma[ind,m+2]<-0}
if (k.alive[i,j]==0) {P<-Pc}
}
}
foo     <- foo%*%gamma*P
sumfoo  <- sum(foo)
lscale  <- lscale+log(sumfoo)
foo     <- foo/sumfoo
}
mllk[i] <- -lscale
}
sum(mllk)
}
## function that runs the numerical minimization of "funmllk" for given starting values
mle<-function(x,beta,p,lambda,sigma,phi,alpha,mu){
parvect<-n2w(beta,p,lambda,sigma,phi,alpha,mu)
mod<-nlm(funmllk,parvect,x=x,print.level=2,stepmax=10,hessian=T,iterlim=10000)
lpn<-w2n(mod$estimate)
return(list(beta=lpn$beta,p=lpn$p,lambda=lpn$lambda,sigma=lpn$sigma,phi=lpn$phi,alpha=lpn$alpha,mu=lpn$mu,mllk=mod$minimum,H=mod$hessian,AIC=mod$minimum*2+2*8))
}
## choose starting values
beta0<-c(-2.5,0.15)
p0<-0.5
lambda0<-0.8
sigma0<-1.5
phi0=0.7
alpha0=1.5
mu0=27
## run numerical maximization and display results
s<-Sys.time()
mod<-mle(x,beta0,p0,lambda0,sigma0,phi0,alpha0,mu0)
solve(mod$H)->hessinv
parvect<-n2w(mod$beta,mod$p,mod$lambda,mod$sigma,mod$phi,mod$alpha,mod$mu)
c1<-parvect[1]+sqrt(hessinv[1,1])*c(qnorm(0.025),0,qnorm(0.975))
c2<-parvect[2]+sqrt(hessinv[2,2])*c(qnorm(0.025),0,qnorm(0.975))
c3<-parvect[3]+sqrt(hessinv[3,3])*c(qnorm(0.025),0,qnorm(0.975))
c4<-parvect[4]+sqrt(hessinv[4,4])*c(qnorm(0.025),0,qnorm(0.975))
c5<-parvect[5]+sqrt(hessinv[5,5])*c(qnorm(0.025),0,qnorm(0.975))
c6<-parvect[6]+sqrt(hessinv[6,6])*c(qnorm(0.025),0,qnorm(0.975))
c7<-parvect[7]+sqrt(hessinv[7,7])*c(qnorm(0.025),0,qnorm(0.975))
c8<-parvect[8]+sqrt(hessinv[8,8])*c(qnorm(0.025),0,qnorm(0.975))
matrix(round(c(c1,c2,inv.logit(c3),inv.logit(c4),exp(c5),inv.logit(c6),c7,c8),3),
ncol=3,byrow=T,dimnames=list(c("beta_1","beta_2","p","lambda","sigma","phi","alpha","mu"),c("lower CI bound", "estimate", "upper CI bound")))
Sys.time()-s
## Web Appendix A
## This code involves two parts:
## Part I simulates MRR data from the model described in Section 3 of the main manuscript
## Part II fits the correctly specified model (HMM-C) to the simulated data using the HMM-based approach
library(boot)
set.seed(12345)
#################################
### Part I: simulate MRR data ###
#################################
N=500
T=10
x<-matrix(NA,N,T)
w<-matrix(NA,N,T)
alive<-matrix(NA,N,T)
beta<-c(-3,0.2)   # GLIM parameters for survival probability
p<-0.3            # prob. (observed | alive)
lambda<-0.9       # prob. (recovery | dies)
sigma<-1.2        # sd of AR(1)-component in covariate process
phi=0.6           # persistence parameter of AR(1)-component in covariate process
alpha=2           # factor in sine-shaped deterministic trend in covariate process
mu=25
## simulate survival, covariate and observation process
alp<-alpha*sin(2*pi*(1:T)/T)
for (k in 1:N){
boo<-sample(1:(T-1),size=1)
alive[k,boo]<-1
x[k,boo]<-1
w[k,boo]<-rnorm(1,15,2) # initial body mass distribution
for (i in (boo+1):T){
w[k,i]<-phi*(w[k,i-1]-mu)+mu+alp[i]+sigma*rnorm(1)
ifelse(alive[k,i-1]==1,alive[k,i]<-rbinom(1,size=1,prob=inv.logit(beta[1]+beta[2]*w[k,i-1])),alive[k,i]<-0)
if (alive[k,i]==1) {
x[k,i]<-rbinom(1,size=1,prob=p)
}
else {
ifelse(alive[k,i-1]==0,x[k,i]<-0,x[k,i]<-2*rbinom(1,size=1,prob=lambda))
}
}
}
## set missing covariate values equal to NA
for (i in 1:N){
for (j in 1:T){
if (!is.na(x[i,j]) & x[i,j]==0) w[i,j]<-NA
if (is.na(x[i,j]))              w[i,j]<-NA
}
}
## determine times when animals are known to be alive (even though they may not be seen at those times)
k.alive<-matrix(0,N,T)
for (i in 1:N){
lo<-min(which(x[i,]==1))
up<-max(which(x[i,]==1))
if (sum(which(x[i,]==2))>0) up<-max(up,max(which(x[i,]==2))-1)
k.alive[i,lo:up]<-1
}
########################################
### Part II: estimation of the model ###
########################################
## number of intervals used in the approximation
m=40
## define essential range of covariate process used in numerical integration to approximate the likelihood
max.w  <-  round(12/10*max(abs(w)[!is.na(w)])) # essential range upper limit
min.w  <-  round(8/10*min(abs(w)[!is.na(w)]))  # essential range lower limit
K      <-m+1
wb     <- seq(min.w,max.w,length=K)
wgrid  <-(wb[-1]+wb[-K])*0.5
## function that transforms natural (constrained) parameters to working (unconstrained) parameters
n2w<-function(beta,p,lambda,sigma,phi,alpha,mu){
parvect<-c(beta,logit(p),logit(lambda),log(sigma),logit(phi),alpha,mu)
return(parvect)
}
## function that performs the inverse transformation
w2n=function(parvect){
beta   <- parvect[1:2]
p      <- inv.logit(parvect[3])
lambda <- inv.logit(parvect[4])
sigma  <- exp(parvect[5])
phi    <- inv.logit(parvect[6])
alpha  <- parvect[7]
mu     <- parvect[8]
return(list(beta=beta,p=p,lambda=lambda,sigma=sigma,phi=phi,alpha=alpha,mu=mu))
}
## function that computes minus the approximate log likelihood
funmllk<-function(parvect,x){
lpn<-w2n(parvect)
mllk=rep(NA,N)
alp<-lpn$alpha*sin(2*pi*(1:T)/T)
for (i in 1:N){
start<-min(which(k.alive[i,]==1))
delta<-rep(0,m+2)
if (wb[1]<w[i,start]) {
delta[max(which(wb<w[i,start]))]<-1
}
else {
delta[1]<-1
}
foo <- delta
sumfoo<-sum(foo)
lscale<-log(sumfoo)
foo<-foo/sumfoo
for (j in (start+1):T){
if (x[i,j-1]==2) break
gamma   <- matrix(0,m+2,m+2)
gamma[(m+1):(m+2),m+2]<-c(1,1)
P  <- c(rep(lpn$p,m),lpn$lambda,0)
Pc <- c(rep(1-lpn$p,m),1-lpn$lambda,1)
if (x[i,j]==2) {
if (is.na(w[i,j-1]))  gamma[,m+1]<-c(1-inv.logit(lpn$beta[1]+lpn$beta[2]*wgrid),1,0)
if (!is.na(w[i,j-1])) gamma[,m+1]<-c(1-inv.logit(lpn$beta[1]+lpn$beta[2]*rep(w[i,j-1],m)),1,0)
gamma[,-(m+1)]<-matrix(0,m+2,m+1)
}
if (x[i,j]==1) {
gamma   <- matrix(0,m+2,m+2)
if (!is.na(w[i,j])) {
ifelse(wb[1]<w[i,j],ind<-max(which(wb[-K]<w[i,j])),ind<-1)
if (is.na(w[i,j-1]))  gamma[1:m,ind]<-dnorm(w[i,j],lpn$phi*(wgrid-lpn$mu)+lpn$mu+alp[j],lpn$sigma)*inv.logit(lpn$beta[1]+lpn$beta[2]*wgrid)
if (!is.na(w[i,j-1])) gamma[1:m,ind]<-dnorm(w[i,j],lpn$phi*(rep(w[i,j-1]-lpn$mu,m))+lpn$mu+alp[j],lpn$sigma)*inv.logit(lpn$beta[1]+lpn$beta[2]*rep(w[i,j-1],m))
}
}
if (x[i,j]==0) {
if ( is.na(w[i,j-1])) {
for (doo in 1:m){
goo<-pnorm(wb[-1],lpn$phi*(wgrid[doo]-lpn$mu)+lpn$mu+alp[j],lpn$sigma)-pnorm(wb[-K],lpn$phi*(wgrid[doo]-lpn$mu)+lpn$mu+alp[j],lpn$sigma)
surv<-inv.logit(lpn$beta[1]+lpn$beta[2]*wgrid[doo])
gamma[doo,1:m]<-goo/sum(goo)*surv
gamma[doo,m+1]<-1-surv
}
if (k.alive[i,j]==1) {P<-Pc; gamma[1:m,m+1]<-rep(0,m); gamma[1:m,m+2]<-rep(0,m)}
if (k.alive[i,j]==0) {P<-Pc}
}
if (!is.na(w[i,j-1])) {
ifelse(wb[1]<w[i,j-1],ind<-max(which(wb[-K]<w[i,j-1])),ind<-1)
surv<-inv.logit(lpn$beta[1]+lpn$beta[2]*w[i,j-1])
gamma[ind,1:m]<-(pnorm(wb[-1],lpn$phi*(w[i,j-1]-lpn$mu)+lpn$mu+alp[j],lpn$sigma)-pnorm(wb[-K],lpn$phi*(w[i,j-1]-lpn$mu)+lpn$mu+alp[j],lpn$sigma))*surv
gamma[ind,m+1]<-1-surv
if (k.alive[i,j]==1) {P<-Pc; gamma[ind,m+1]<-0; gamma[ind,m+2]<-0}
if (k.alive[i,j]==0) {P<-Pc}
}
}
foo     <- foo%*%gamma*P
sumfoo  <- sum(foo)
lscale  <- lscale+log(sumfoo)
foo     <- foo/sumfoo
}
mllk[i] <- -lscale
}
sum(mllk)
}
## function that runs the numerical minimization of "funmllk" for given starting values
mle<-function(x,beta,p,lambda,sigma,phi,alpha,mu){
parvect<-n2w(beta,p,lambda,sigma,phi,alpha,mu)
mod<-nlm(funmllk,parvect,x=x,print.level=2,stepmax=10,hessian=T,iterlim=10000)
lpn<-w2n(mod$estimate)
return(list(beta=lpn$beta,p=lpn$p,lambda=lpn$lambda,sigma=lpn$sigma,phi=lpn$phi,alpha=lpn$alpha,mu=lpn$mu,mllk=mod$minimum,H=mod$hessian,AIC=mod$minimum*2+2*8))
}
## choose starting values
beta0<-c(-2.5,0.15)
p0<-0.5
lambda0<-0.8
sigma0<-1.5
phi0=0.7
alpha0=1.5
mu0=27
## run numerical maximization and display results
s<-Sys.time()
mod<-mle(x,beta0,p0,lambda0,sigma0,phi0,alpha0,mu0)
solve(mod$H)->hessinv
parvect<-n2w(mod$beta,mod$p,mod$lambda,mod$sigma,mod$phi,mod$alpha,mod$mu)
c1<-parvect[1]+sqrt(hessinv[1,1])*c(qnorm(0.025),0,qnorm(0.975))
c2<-parvect[2]+sqrt(hessinv[2,2])*c(qnorm(0.025),0,qnorm(0.975))
c3<-parvect[3]+sqrt(hessinv[3,3])*c(qnorm(0.025),0,qnorm(0.975))
c4<-parvect[4]+sqrt(hessinv[4,4])*c(qnorm(0.025),0,qnorm(0.975))
c5<-parvect[5]+sqrt(hessinv[5,5])*c(qnorm(0.025),0,qnorm(0.975))
c6<-parvect[6]+sqrt(hessinv[6,6])*c(qnorm(0.025),0,qnorm(0.975))
c7<-parvect[7]+sqrt(hessinv[7,7])*c(qnorm(0.025),0,qnorm(0.975))
c8<-parvect[8]+sqrt(hessinv[8,8])*c(qnorm(0.025),0,qnorm(0.975))
matrix(round(c(c1,c2,inv.logit(c3),inv.logit(c4),exp(c5),inv.logit(c6),c7,c8),3),
ncol=3,byrow=T,dimnames=list(c("beta_1","beta_2","p","lambda","sigma","phi","alpha","mu"),c("lower CI bound", "estimate", "upper CI bound")))
Sys.time()-s
?n2w
? n2w
c1
load("C:/Users/aga/Dropbox/Research Visit/Ruth King/Codes/BKM/Results/BKM_HMM_try_iter2000_ada100_linux.RData")
time_HMM_sample
29857/3600
