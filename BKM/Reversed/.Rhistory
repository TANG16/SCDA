diff(pnorm((b-phi*bs[i])/sigma))
Gamma[,1]
Gamma[1,]
t=1
dnorm(y[t],0,sey)
y[1]
dnorm(0.0505,0,sey)
dnorm(   0.050515497452117,0,sey)
Gamma*dnorm(y[t],0,sey)
P <- dnorm(y[t],0,sey)
Gamma*P
dim(Gamma*P)
dim(P)
dim(Gamma)
A=matrix(c(1:9),ncol = 3,nrow=3,byrow = TRUE)
A
B=c(10:10:90)
B
B=seq(10,90,by=10)
B
B=seq(10,300,by=10)
B=seq(10,30,by=10)
m <- 30 #50 100 200
gmax <- 4
phi <- 0.98
sigma <- 0.2
beta <- 0.05
P1 <- (sigma^2)/(1-phi^2)
T <- 1000
h <- rep(NaN,1000)
h[1] <- sqrt(P1)*rnorm(1)
for (t in c(2:T)){
h[t] = phi*h[t-1] + sigma*rnorm(1)
}
y <- beta*exp(h/2)*rnorm(T)
plot(y,type='l')
K <- m+1
b <- seq(- gmax,gmax,length=K) #endpoints
bs <- (b[-1]+b[-K])*0.5 # midpoints
sey <- beta*exp(bs/2) # st.dev. of y in each midpoint
Gamma <- matrix(0,m,m)
for (i in 1:m) Gamma[i,] <- diff(pnorm(b,phi*bs[i],sigma)) #time constant tpm
Gamma <- Gamma/apply(Gamma,1,sum)	 #scale the rows of Gamma to sum up to 1
foo <- solve(t(diag(m)-Gamma+1),rep(1,m)) # compute delta=delta*Gamma, the stationary distribution of the MC
llk <- 0
t=1
P <- dnorm(y[t],0,sey)
P
typeof(P)
typeof(Gamma)
typeof(foo)
foo%*%Gamma*dnorm(y[t],0,sey)
foo
Gamma*dnorm(y[t],0,sey)
size(Gamma*dnorm(y[t],0,sey))
dim(Gamma*dnorm(y[t],0,sey))
A<-matrix(c(1:9),nrow = 3,byrow = TRUE)
B<-c(10,20,30)
A*B
A%*%B
A*t(B)
t(B)*A
B*A
A
B
B<-matrix(c(10,20,30),nrow=3)
A*B
A*t(B)
A*as.vector(B)
B
A*B
A%*%B
Gamma%*%dnorm(y[t],0,sey)
Gamma%*%diag(dnorm(y[t],0,sey))
diag(dnorm(y[t],0,sey))
Gamma%*%diag(dnorm(y[t],0,sey))
Gamma%*%dnorm(y[t],0,sey)
Gamma%*%dnorm(y[t],0,sey)
Gamma*dnorm(y[t],0,sey)
phi
y[1]
foo%*%Gamma*dnorm(y[t],0,sey)
sumfoo
foo
foo <- solve(t(diag(m)-Gamma+1),rep(1,m)) # compute delta=delta*Gamma, the stationary distribution of the MC
t=1
llk <- 0
foo <- foo%*%Gamma*dnorm(y[t],0,sey)
sumfoo <- sum(foo)
sumfoo
foo
plot(foo,type='l')
plot(t(foo),type='l')
plot(t(foo))
llk <- llk+log(sumfoo)
foo <- foo/sumfoo
for (t in 2:length(y)){
# P <- dnorm(y[t],0,sey)
foo <- foo%*%Gamma*dnorm(y[t],0,sey)
sumfoo <- sum(foo)
llk <- llk+log(sumfoo)
foo <- foo/sumfoo
}
llk
foo <- solve(t(diag(m)-Gamma+1),rep(1,m)) # compute delta=delta*Gamma, the stationary distribution of the MC
llk <- 0
for (t in 1:length(y)){
# P <- dnorm(y[t],0,sey)
foo <- foo%*%Gamma*dnorm(y[t],0,sey)
sumfoo <- sum(foo)
llk <- llk+log(sumfoo)
# foo <- foo/sumfoo
}
llk
foo <- solve(t(diag(m)-Gamma+1),rep(1,m)) # compute delta=delta*Gamma, the stationary distribution of the MC
llk <- 0
for (t in 1:10){
# P <- dnorm(y[t],0,sey)
foo <- foo%*%Gamma*dnorm(y[t],0,sey)
sumfoo <- sum(foo)
llk <- llk+log(sumfoo)
# foo <- foo/sumfoo
}
llk
foo <- solve(t(diag(m)-Gamma+1),rep(1,m)) # compute delta=delta*Gamma, the stationary distribution of the MC
llk <- 0
for (t in 1:10){
# P <- dnorm(y[t],0,sey)
foo <- foo%*%Gamma*dnorm(y[t],0,sey)
sumfoo <- sum(foo)
llk <- llk+log(sumfoo)
foo <- foo/sumfoo
}
llk
log(sumfoo)
N_bin = 10 # Number of intervals
# Lower bin values:
qu <- c(0:(N_bin-1))/N_bin
mid <- qu+qu[2]/2
qu
mid
qu[2]
? qnorm
? qpois
source('C:/Users/aba228/Dropbox/Research Visit/Ruth King/Codes/BKM/Update/BKM_Run_HMM_approx_linux_unifprior_norm.R', echo=TRUE)
install.packages(rjags)
library("rjags", lib.loc="Q:/NRJ4BFCY/R-3.1.2/library")
library("rjags", lib.loc="Q:/NRJ4BFCY/R-3.1.2/library")
detach("package:rjags", unload=TRUE)
library("rjags", lib.loc="Q:/NRJ4BFCY/R-3.1.2/library")
load("C:/Users/aba228/Dropbox/Research Visit/Ruth King/Codes/BKM/Update/BKM_ESS.RData")
unlist(TTT)
load("C:/Users/aba228/Dropbox/Research Visit/Ruth King/Codes/Heron/Adaptive/Heron_HMM_approx_iter30000_ada1000_linux_COMB_unifprior_norm.RData")
mat1_HMM_10_5 = as.matrix(output_10_5[1])
mat2_HMM_10_5 = as.matrix(output_10_5[2])
mat_names_HMM_adapt <- colnames(mat1_HMM_10_5)
mat1_HMM_50_40 = as.matrix(output_50_40[1])
mat2_HMM_50_40 = as.matrix(output_50_40[2])
mat1_HMM_100_70 = as.matrix(output_100_70[1])
mat2_HMM_100_70 = as.matrix(output_100_70[2])
mat_names_HMM_adapt
par(mfrow=c(2,1),oma=c(0,0,1.5,0))
plot(colMeans(mat1_HMM_10_5[,(1:72)]), type='l', xlab ="", ylab="", sub="X2")
lines(colMeans(mat1_HMM_50_40[,(1:72)]), type='l', col="blue")
lines(colMeans(mat1_HMM_100_70[,(1:72)]), type='l', col="red")
plot(colMeans(mat1_HMM_10_5[,72+(1:72)]), type='l', xlab ="", ylab="", sub="X4")
lines(colMeans(mat1_HMM_50_40[,72+(1:72)]), type='l', col="blue")
lines(colMeans(mat1_HMM_100_70[,72+(1:72)]), type='l', col="red")
mtext("Posterior means", outer=TRUE, cex=1)
legend(60,6000,c("10,5)","50,40","100,70"), col=("black","blue","red"))
legend(60,6000,c("10,5","50,40","100,70"), col=("black","blue","red"))
par(mfrow=c(2,1),oma=c(0,0,1.5,0))
plot(colMeans(mat1_HMM_10_5[,(1:72)]), type='l', xlab ="", ylab="", sub="X2")
lines(colMeans(mat1_HMM_50_40[,(1:72)]), type='l', col="blue")
lines(colMeans(mat1_HMM_100_70[,(1:72)]), type='l', col="red")
plot(colMeans(mat1_HMM_10_5[,72+(1:72)]), type='l', xlab ="", ylab="", sub="X4")
lines(colMeans(mat1_HMM_50_40[,72+(1:72)]), type='l', col="blue")
lines(colMeans(mat1_HMM_100_70[,72+(1:72)]), type='l', col="red")
mtext("Posterior means", outer=TRUE, cex=1)
legend(60,6000,c("10,5","50,40","100,70"), col=("black","blue","red"))
legend(60,6000,c("10,5","50,40","100,70"), col=("green","blue","red"))
legend(60,6000,c("10,5","50,40","100,70"))
par(mfrow=c(2,1),oma=c(0,0,1.5,0))
plot(colMeans(mat1_HMM_10_5[,(1:72)]), type='l', xlab ="", ylab="", sub="X2")
lines(colMeans(mat1_HMM_50_40[,(1:72)]), type='l', col="blue")
lines(colMeans(mat1_HMM_100_70[,(1:72)]), type='l', col="red")
plot(colMeans(mat1_HMM_10_5[,72+(1:72)]), type='l', xlab ="", ylab="", sub="X4")
lines(colMeans(mat1_HMM_50_40[,72+(1:72)]), type='l', col="blue")
lines(colMeans(mat1_HMM_100_70[,72+(1:72)]), type='l', col="red")
mtext("Posterior means", outer=TRUE, cex=1)
legend(60,6000,c("10,5","50,40","100,70"))
legend(60,1500,c("10,5","50,40","100,70"))
legend(60,4500,c("10,5","50,40","100,70"))
legend(60,1500,c("10,5","50,40","100,70"))
legend(60,2500,c("10,5","50,40","100,70"))
legend(65,2500,c("10,5","50,40","100,70"))
legend(65,2750,c("10,5","50,40","100,70"))
legend(67,2750,c("10,5","50,40","100,70"))
legend(67,2750,legend = c("10,5","50,40","100,70"), lty=1)
legend(67,2750,legend = c("10,5","50,40","100,70"), lty=1,
col=("black","blue","red"))
legend(67,2750,legend = c("10,5","50,40","100,70"), lty=1,
col=("blue","red"))
legend(67,2750,legend = c("10,5","50,40","100,70"), lty=1,
col=("blue"))
legend(67,2750,legend = c("10,5","50,40","100,70"), lty=1, col=("blue","red","black"))
par(mfrow=c(2,1),oma=c(0,0,1.5,0))
plot(colMeans(mat1_HMM_10_5[,(1:72)]), type='l', xlab ="", ylab="", sub="X2")
lines(colMeans(mat1_HMM_50_40[,(1:72)]), type='l', col="blue")
lines(colMeans(mat1_HMM_100_70[,(1:72)]), type='l', col="red")
plot(colMeans(mat1_HMM_10_5[,72+(1:72)]), type='l', xlab ="", ylab="", sub="X4")
lines(colMeans(mat1_HMM_50_40[,72+(1:72)]), type='l', col="blue")
lines(colMeans(mat1_HMM_100_70[,72+(1:72)]), type='l', col="red")
mtext("Posterior means", outer=TRUE, cex=1)
legend(67,2750,legend = c("10,5","50,40","100,70"), lty=1, col=c("black","blue","red"))
par(mfrow=c(2,1),oma=c(0,0,1.5,0))
plot(colMeans(mat1_HMM_10_5[,(1:72)]), type='l', xlab ="", ylab="", sub="X2")
lines(colMeans(mat1_HMM_50_40[,(1:72)]), type='l', col="blue")
lines(colMeans(mat1_HMM_100_70[,(1:72)]), type='l', col="red")
plot(colMeans(mat1_HMM_10_5[,72+(1:72)]), type='l', xlab ="", ylab="", sub="X4")
lines(colMeans(mat1_HMM_50_40[,72+(1:72)]), type='l', col="blue")
lines(colMeans(mat1_HMM_100_70[,72+(1:72)]), type='l', col="red")
mtext("Posterior means", outer=TRUE, cex=1)
legend(65,2750,legend = c("10,5","50,40","100,70"), lty=1, col=c("black","blue","red"))
par(mfrow=c(3,4))
for (i in c(1:4,7:10,5,6,11,12)){
plot(mat1_HMM_10_5[,2*72+i], type="l", xlab = "", ylab="", sub = mat_names_HMM_adapt[2*72+i])
lines(mat1_HMM_50_40[,2*72+i], type="l",  ol="blue")
lines(mat1_HMM_100_70[,2*72+i], type="l", col="red")
}
par(mfrow=c(3,4))
for (i in c(1:4,7:10,5,6,11,12)){
plot(mat1_HMM_10_5[,2*72+i], type="l", xlab = "", ylab="", sub = mat_names_HMM_adapt[2*72+i])
lines(mat1_HMM_50_40[,2*72+i], type="l", col="blue")
lines(mat1_HMM_100_70[,2*72+i], type="l", col="red")
}
load("C:/Users/aba228/Dropbox/Research Visit/Ruth King/Codes/SV/SV_HMM_Nbin30_changed_inits.RData")
mat1_HMM = as.matrix(output_sv_HMM[1])
mat2_HMM = as.matrix(output_sv_HMM[2])
mat_names_HMM <- colnames(mat1_HMM)
######## Params trace plots
par(mfrow = c(3,1))
for (i in 1:3){
plot(mat1_HMM[,T/2+i],type='l',col='blue', xlab="", ylab="", sub=mat_names_HMM[T/2+i])
lines(mat2_HMM[,T/2+i],type='l',col='red')
}
mat_names_DA
mat_names_HMM
T=1000
par(mfrow = c(3,1))
for (i in 1:3){
plot(mat1_HMM[,T/2+i],type='l',col='blue', xlab="", ylab="", sub=mat_names_HMM[T/2+i])
lines(mat2_HMM[,T/2+i],type='l',col='red')
}
par(mfrow = c(3,1))
for (i in 1:3){
plot(mat1_HMM[,T/2+i],type='l',col='blue', xlab="", ylab="", sub=mat_names_HMM[T/2+i])
lines(mat2_HMM[,T/2+i],type='l',col='red')
lines(param[i] + 0*mat2_HMM[,T/2+i],type='l',col='black')
}
par(mfrow = c(3,1))
for (i in 1:3){
plot(mat1_HMM[,T/2+i],type='l',col='blue', xlab="", ylab="", sub=mat_names_HMM[T/2+i])
lines(mat2_HMM[,T/2+i],type='l',col='green')
lines(param[i] + 0*mat2_HMM[,T/2+i],type='l',col='red')
}
param
par(mfrow = c(3,1))
for (i in 1:3){
plot(param[i] + 0*mat2_HMM[,T/2+i],type='l',col='red', xlab="", ylab="", sub=mat_names_HMM[T/2+i])
lines(mat1_HMM[,T/2+i],type='l',col='blue')
lines(mat2_HMM[,T/2+i],type='l',col='green')
#   lines(param[i] + 0*mat2_HMM[,T/2+i],type='l',col='red')
}
plot(param[i] + 0*mat2_HMM[,T/2+i],type='l',col='red', xlab="", ylab="", sub=mat_names_HMM[T/2+i])
i
i=1
param[i]
mat_names_HMM[T/2+i]
plot(param[i] + 0*mat2_HMM[,T/2+i],type='l',col='red', xlab="", ylab="", sub=mat_names_HMM[T/2+i])
lines(mat1_HMM[,T/2+i],type='l',col='blue')
plotlines(mat1_HMM[,T/2+i],type='l',col='blue')
plot(mat1_HMM[,T/2+i],type='l',col='blue')
par(mfrow = c(1,1))
plot(param[i] + 0*mat2_HMM[,T/2+i],type='l',col='red', xlab="", ylab="", sub=mat_names_HMM[T/2+i])
lines(mat1_HMM[,T/2+i],type='l',col='blue')
plot(param[i] + 0*mat2_HMM[,T/2+i],type='l',col='red',ylim=c(-2,0), xlab="", ylab="", sub=mat_names_HMM[T/2+i])
lines(mat1_HMM[,T/2+i],type='l',col='blue')
lines(mat2_HMM[,T/2+i],type='l',col='green')
max(mat2_HMM[,T/2+i])
min(mat2_HMM[,T/2+i])
min(mat1_HMM[,T/2+i])
max(mat1_HMM[,T/2+i])
YL = matrix(c(-2,0, 0.94,1, 0,1), ncol = 2, byrow=TRUE)
par(mfrow = c(3,1))
for (i in 1:3){
plot(param[i] + 0*mat2_HMM[,T/2+i],type='l',col='red',ylim=YL[,i], xlab="", ylab="", sub=mat_names_HMM[T/2+i])
lines(mat1_HMM[,T/2+i],type='l',col='blue')
lines(mat2_HMM[,T/2+i],type='l',col='green')
#   lines(param[i] + 0*mat2_HMM[,T/2+i],type='l',col='red')
}
YL = matrix(c(-2,0, 0.94,1, 0,1), ncol = 2, byrow=TRUE)
1)
YL = matrix(c(-2,0, 0.94,1, 0,1), ncol = 2, byrow=TRUE))
YL = matrix(c(-2,0, 0.94,1, 0,1), ncol = 2, byrow=TRUE)
YL
YL[,i]
par(mfrow = c(3,1))
for (i in 1:3){
plot(param[i] + 0*mat2_HMM[,T/2+i],type='l',col='red',ylim= YL[i,], xlab="", ylab="", sub=mat_names_HMM[T/2+i])
lines(mat1_HMM[,T/2+i],type='l',col='blue')
lines(mat2_HMM[,T/2+i],type='l',col='green')
#   lines(param[i] + 0*mat2_HMM[,T/2+i],type='l',col='red')
}
YL = matrix(c(-2,0, 0.96,1, 0,0.2), ncol = 2, byrow=TRUE)
par(mfrow = c(3,1))
for (i in 1:3){
plot(param[i] + 0*mat2_HMM[,T/2+i],type='l',col='red',ylim= YL[i,], xlab="", ylab="", sub=mat_names_HMM[T/2+i])
lines(mat1_HMM[,T/2+i],type='l',col='blue')
lines(mat2_HMM[,T/2+i],type='l',col='green')
#   lines(param[i] + 0*mat2_HMM[,T/2+i],type='l',col='red')
}
######## Params trace plots
YL = matrix(c(-2,0, 0.96,1, 0,0.1), ncol = 2, byrow=TRUE)
par(mfrow = c(3,1))
for (i in 1:3){
plot(param[i] + 0*mat2_HMM[,T/2+i],type='l',col='red',ylim= YL[i,], xlab="", ylab="", sub=mat_names_HMM[T/2+i])
lines(mat1_HMM[,T/2+i],type='l',col='blue')
lines(mat2_HMM[,T/2+i],type='l',col='green')
#   lines(param[i] + 0*mat2_HMM[,T/2+i],type='l',col='red')
}
YL = matrix(c(-2,0, 0.96,1, 0,0.1), ncol = 2, byrow=TRUE)
lines(mat1_HMM[,T/2+i],type='l',col='blue')
par(mfrow = c(1,1))
plot(h_true,type='l')
# lines(colMeans(mat1_DA[1:5000,1:T]),col='red')
lines(seq(2,T,by=2),colMeans(mat1_HMM[,1:(T/2)]),col='blue')
lines(seq(2,T,by=2),colMeans(mat2_HMM[,1:(T/2)]),col='red')
setwd("BKM/Reversed")
# install.packages(rjags)
# install.packages(coda)
# install.packages(lattice)
library(rjags)
library(coda)
library(lattice)
set.seed(134522)
save_on = TRUE
# MCMC details:  ####
ada=100
iter=10000
# ada=10000
# iter=10000
th=1
cha=1
cat("BKM reversed HMM approximation","\n")
cat(sprintf("adapt = %i",ada),"\n")
cat(sprintf("iter = %i",iter),"\n")
cat(sprintf("thinning = %i",th),"\n")
cat(sprintf("chains = %i",cha),"\n")
# Read data ###
# source("BKM_Data_HMM_approx_unifprior.R")
source("BKM_reversed_Data_HMM_approx_unifprior_fun.R")
source("BKM_reversed_StartingVals_HMM_approx_unifprior.R")
# cat(sprintf("scale = %i",sc),"\n")
# cat(sprintf("bin size = %i",bin_size),"\n")
##########################################
cat("\n *** N_bin = 30, bin_size = 75 *** \n")
data_30_75 <- data_fun_fixed()
cat("Initialise the model:\n")
tstart=proc.time()
mod_30_75<- jags.model('BKM_reversed_Bugs_HMM_approx_unifprior.R',data_30_75,inits,n.chains=cha,n.adapt=ada)
temp=proc.time()-tstart
source("BKM_reversed_StartingVals_HMM_approx_unifprior.R")
# cat(sprintf("scale = %i",sc),"\n")
# cat(sprintf("bin size = %i",bin_size),"\n")
##########################################
cat("\n *** N_bin = 30, bin_size = 75 *** \n")
data_30_75 <- data_fun_fixed()
cat("Initialise the model:\n")
tstart=proc.time()
mod_30_75<- jags.model('BKM_reversed_Bugs_HMM_approx_unifprior.R',data_30_75,inits,n.chains=cha,n.adapt=ada)
temp=proc.time()-tstart
rm(list=ls())
d required packages and fix the random seed
library(rjags)
library(coda)
library(lattice)
set.seed(134522)
save_on = FALSE
scaled_on = FALSE
# MCMC details: ####
# # # ada=1000
# # # iter=3000
# # # th=1
# # # cha=2
# # ada=100
# # iter=2000
# # th=1
# # cha=3
# ada=0
# iter=10000
# th=1
# cha=3
ada=100
iter=10000
th=1
cha=1
# Read data
if (scaled_on){
source("BKM_Data_scaled.R")
# Set parameters and inital values
source("BKM_StartingVals_scaled.R")
}else {
source("BKM_Data.R")
# Set parameters and inital values
source("BKM_StartingVals.R")
}
# Compile the model: ####
if (scaled_on){
tstart=proc.time()
mod <- jags.model('BKM_Bugs_scaled.R',data,inits,n.chains=cha,n.adapt=ada)
temp=proc.time()-tstart
time_init <- temp
if (save_on) {
save(mod, time_init, file = "Results/BKM_model_scaled.RData")
}
}else {
tstart=proc.time()
mod <- jags.model('BKM_Bugs.R',data,inits,n.chains=cha,n.adapt=ada)
temp=proc.time()-tstart
time_init <- temp # ada = 100 --> PC: 1.23; ada = 1000 --> PC: 6.29
if (save_on) {
save(mod, time_init, file = "Results/BKM_model.RData")
}
}
# Run the MCMC: ####
tstart=proc.time()
output1 <- coda.samples(mod,params,n.iter=iter,thin=th)
temp=proc.time()-tstart
time_sample <- temp # PC org:   5.23
if (save_on) {
if (scaled_on){
save(output1, time_sample, file = paste("Results/BKM_iter",toString(iter),"_ada",toString(ada),"_scaled.RData",sep=""))
}else {
save(output1, time_sample, file = paste("Results/BKM_iter",toString(iter),"_ada",toString(ada),".RData",sep=""))
}
}
mat1 = as.matrix(output1[1])
mat1_names <- colnames(mat1)
par(mfrow=c(2,1),oma=c(0,0,1.5,0))
plot(colMeans(mat1[,(1:T)]), type='l', xlab ="", ylab="", sub="N1")
plot(colMeans(mat1[,(T+1):(T+T)]), type='l', xlab ="", ylab="", sub="Na")
mtext("Posterior means", outer=TRUE, cex=1)
par(mfrow=c(2,1),oma=c(0,0,1.5,0))
plot(colMeans(mat1[,(1:T)]), type='l', xlab ="", ylab="", sub="N1")
plot(colMeans(mat1[,(T+1):(T+T)]), type='l', xlab ="", ylab="", sub="Na")
mtext("Posterior means", outer=TRUE, cex=1)
y
par(mfrow=c(1,1) )
plot(y/colMeans(mat1[,(1:T)]), type='l', xlab ="", ylab="", sub="N1")
load("C:/Users/aga/Dropbox/Research Visit/Ruth King/Codes/BKM/Reversed/BKM_HMM_approx_iter10000_ada100_reversed.RData")
time_HMM_init_30_75
time_HMM_sample_30_75
mat_30_75 = as.matrix(output_HMM_30_75[1])
# mat2 = as.matrix(output1[2])
# summary(output1)
mat1_names <- colnames(mat_30_75)
par(mfrow=c(3,3), oma = c(0, 0, 1.5, 0))
for (i in c(37:45)){
plot(mat_30_75[,i], type="l", xlab ="", ylab="", sub=mat1_names[i])
}
par(mfrow=c(3,3), oma = c(0, 0, 1.5, 0))
for (i in c(1:9)){
plot(mat_30_75[,4*(i-3)+9], type="l", xlab ="", ylab="", sub=mat1_names[4*(i-3)+9])
}
mat1_names <- colnames(mat1)
par(mfrow=c(3,3), oma = c(0, 0, 1.5, 0))
for (i in c(73:81)){
plot(mat1[,i], type="l", xlab ="", ylab="", sub=mat1_names[i])
}
par(mfrow=c(3,3), oma = c(0, 0, 1.5, 0))
for (i in c(1:9)){
plot(mat1[,4*(i-3)+9], type="l", xlab ="", ylab="", sub=mat1_names[4*(i-3)+9])
}
? dnorm
30*75/50
data_50_45 <- data_fun_fixed( N_bin = 50, bin_size = 55 )
source("BKM_reversed_Data_HMM_approx_unifprior_fun.R")
# Set parameters and inital values
source("BKM_reversed_StartingVals_HMM_approx_unifprior.R")
# cat(sprintf("scale = %i",sc),"\n")
# cat(sprintf("bin size = %i",bin_size),"\n")
##########################################
cat("\n *** N_bin = 50, bin_size = 55 *** \n")
data_50_45 <- data_fun_fixed( N_bin = 50, bin_size = 55 )
data_50_45
data_50_45 <- data_fun_fixed( N_bin = 50, bin_size = 45 )
data_50_45
N1_cont[t] ~ dunif(0 + 0.5, Up +0.5)
time_HMM_init_30_75
time_HMM_sample_30_75
load("C:/Users/aga/Dropbox/Research Visit/Ruth King/Codes/BKM/Reversed/BKM_HMM_approx_iter10000_ada100_reversed.RData")
time_HMM_init_50_45
time_HMM_sample_50_45
# Collect the results ####
mat_50_45 = as.matrix(output_HMM_50_45[1])
# mat2 = as.matrix(output1[2])
# summary(output1)
mat1_names <- colnames(mat_50_45)
par(mfrow=c(1,1),oma=c(0,0,1.5,0))
plot(colMeans(mat_50_45[,(1:36)]), type='l', xlab ="", ylab="", sub="N1")
mtext("Posterior means", outer=TRUE, cex=1)
